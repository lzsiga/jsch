Conversion between 'byte[]' and 'String'

  Is performed by Util.str2byte and Util.byte2str methods:

    static byte[] str2byte(String str, String encoding)
    static byte[] str2byte(String str)

    static String byte2str(byte[] str, String encoding)
    static String byte2str(byte[] str, int s, int l, String encoding)
    static String byte2str(byte[] str)
    static String byte2str(byte[] str, int s, int l)

    When there's no 'encoding' parameter, UTF-8 is used (and if that fails, the default encoding)

    In version 0.1.55a1 these methods became 'public': they might be useful as they are easier
    to use than 'new String' and 'String.getBytes': they handle null value, and don't throw exceptions

    Note: if we have binary data that is supposed to be ASCII, but actually it can contain
    other characters (e.g. in the 'comment' part), converting it to String
    with UTF8-encoding might fail, as not every binary sequence is valid as UTF8;
    so encoding ISO-8859-1 might be safer: every binary sequence is valid as ISO-8859-1
    (for an example, see KeyPairECDSA.parsePublicKeySingleLine)

  Example for such conversion:
    'ChannelSession' has an 'env' member of type 'Hashtable<byte[],byte[]>'
     When you store (key,value) pair with 'setEnv(String,String)', 'str2byte' is used
     When using 'setEnv(byte[],byte[])' there is no converion.

Supported key-file formats

    Version 1.55 supports PPK-files with RSA and DSA keys, Windows-style (CRLF) lines,
    version 1.55a intends to support PPK-files with RSA, DSA or ECDSA keys, CRLF of LF line-ends.
